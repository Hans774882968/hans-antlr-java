// 支持重载
void printOrangeStr(long v) {
    print "\033[33m" + v + "\033[0m"
}

void printOrangeStr(string s) {
    print "\033[33m" + s + "\033[0m"
}

void printAdd() {
    print 114514
}

void printAdd(int a) {
    print 114510L + a
}

void printAdd(long a) {
    print 114514L + a
}

void printAdd(float a) {
    print 114.514 + a
}

void printAdd(double a) {
    print 1145.14f + a
}

void printAdd(int a, int b) {
    print a + b
}

void printAdd(int a, int b, int c) {
    print a + b + c
}

void printQPow(long a, long b, int mod) {
    var res = 1L
    for ; b > 0; b >>= 1 {
        if (b & 1) > 0 res = res * a % mod
        a *= a
        a %= mod
    }
    printOrangeStr(res)
}

void printDivSum(long n) {
    var ans = 0l
    var mx = 0l
    var mod = 998244353
    for var L = 1l; L <= n; {
        var R = n / (n / L)
        ans = (ans + (R - L + 1) * (n / L) % mod) % mod
        if mx < (R - L + 1) * (n / L) mx = (R - L + 1) * (n / L)
        L = R + 1
    }
    print "整除分块 mx = " + mx + ", ans = " + ans
}

void main(string[] args) {
    // 114514 114515 114516 116.514 1147.1400146484375 25 39
    printAdd()
    printAdd(5)
    printAdd(2L)
    printAdd(2f)
    printAdd(2d)
    printAdd(12, 13)
    printAdd(12, 13, 14)

    var a = 2L
    var b = 3
    var mod = 998244353
    for b: 0 to 4 {
        printQPow(a, 1L * b, mod)
    }

    printOrangeStr("b = " + b)

    printDivSum(50000L) // 548725
    printDivSum(10000000L) // 162725364
    printDivSum(100000000000L) // 767147441
}
