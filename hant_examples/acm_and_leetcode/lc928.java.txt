// decompile from lc928.hant, AC https://leetcode.cn/submissions/detail/468820091/
class Solution {
    public int find(int[] var0, int var1) {
        return var1 - var0[var1] != 0 ? (var0[var1] = find(var0, var0[var1])) : var1;
    }

    public int minMalwareSpread(int[][] var0, int[] var1) {
        int var2 = var0.length;
        int var3 = var1.length;
        boolean[] var4 = new boolean[var2];

        for (int var5 = 0; var5 - var3 < 0; ++var5) {
            var4[var1[var5]] = true;
        }

        int[] var14 = new int[var2];
        int var6 = 0;

        while (true) {
            if (0 - (var2 - 1) < 0) {
                if (var6 - (var2 - 1) > 0) {
                    break;
                }
            } else if (var6 - (var2 - 1) < 0) {
                break;
            }

            var14[var6] = var6;
            if (0 - (var2 - 1) < 0) {
                ++var6;
            } else {
                --var6;
            }
        }

        var6 = 0;

        int var7;
        while (true) {
            if (0 - (var2 - 1) < 0) {
                if (var6 - (var2 - 1) > 0) {
                    break;
                }
            } else if (var6 - (var2 - 1) < 0) {
                break;
            }

            for (var7 = 0; var7 - var6 < 0; ++var7) {
                if (var0[var6][var7] - 0 != 0 && !var4[var6] && !var4[var7]) {
                    var14[find(var14, var6)] = find(var14, var7);
                }
            }

            if (0 - (var2 - 1) < 0) {
                ++var6;
            } else {
                --var6;
            }
        }

        boolean[][] var15 = new boolean[var2][var2];
        var7 = 0;

        int var8;
        while (true) {
            if (0 - (var3 - 1) < 0) {
                if (var7 - (var3 - 1) > 0) {
                    break;
                }
            } else if (var7 - (var3 - 1) < 0) {
                break;
            }

            var8 = 0;

            while (true) {
                if (0 - (var2 - 1) < 0) {
                    if (var8 - (var2 - 1) > 0) {
                        break;
                    }
                } else if (var8 - (var2 - 1) < 0) {
                    break;
                }

                if (var0[var1[var7]][var8] - 0 != 0 && !var4[var8]) {
                    var15[find(var14, var8)][var1[var7]] = true;
                }

                if (0 - (var2 - 1) < 0) {
                    ++var8;
                } else {
                    --var8;
                }
            }

            if (0 - (var3 - 1) < 0) {
                ++var7;
            } else {
                --var7;
            }
        }

        int[] var16 = new int[var2];
        var8 = 0;

        int var9;
        while (true) {
            if (0 - (var2 - 1) < 0) {
                if (var8 - (var2 - 1) > 0) {
                    break;
                }
            } else if (var8 - (var2 - 1) < 0) {
                break;
            }

            var9 = 0;

            while (true) {
                if (0 - (var2 - 1) < 0) {
                    if (var9 - (var2 - 1) > 0) {
                        break;
                    }
                } else if (var9 - (var2 - 1) < 0) {
                    break;
                }

                if (var15[var8][var9]) {
                    int var10002 = var16[var8]++;
                }

                if (0 - (var2 - 1) < 0) {
                    ++var9;
                } else {
                    --var9;
                }
            }

            if (0 - (var2 - 1) < 0) {
                ++var8;
            } else {
                --var8;
            }
        }

        int[] var17 = new int[var2];
        var9 = 0;

        while (true) {
            if (0 - (var2 - 1) < 0) {
                if (var9 - (var2 - 1) > 0) {
                    break;
                }
            } else if (var9 - (var2 - 1) < 0) {
                break;
            }

            if (!var4[var9]) {
                ++var17[find(var14, var9)];
            }

            if (0 - (var2 - 1) < 0) {
                ++var9;
            } else {
                --var9;
            }
        }

        int[] var18 = new int[var3];
        int var10 = 0;

        int var12;
        while (true) {
            if (0 - (var3 - 1) < 0) {
                if (var10 - (var3 - 1) > 0) {
                    break;
                }
            } else if (var10 - (var3 - 1) < 0) {
                break;
            }

            boolean[] var11 = new boolean[var2];
            var12 = 0;

            while (true) {
                if (0 - (var2 - 1) < 0) {
                    if (var12 - (var2 - 1) > 0) {
                        break;
                    }
                } else if (var12 - (var2 - 1) < 0) {
                    break;
                }

                if (var0[var1[var10]][var12] - 0 != 0 && !var4[var12]) {
                    int var13 = find(var14, var12);
                    if (var16[var13] - 1 == 0 && !var11[var13]) {
                        var11[var13] = true;
                        var18[var10] += var17[var13];
                    }
                }

                if (0 - (var2 - 1) < 0) {
                    ++var12;
                } else {
                    --var12;
                }
            }

            if (0 - (var3 - 1) < 0) {
                ++var10;
            } else {
                --var10;
            }
        }

        var10 = 0;
        int var19 = var2;
        var12 = 0;

        while (true) {
            if (0 - (var3 - 1) < 0) {
                if (var12 - (var3 - 1) > 0) {
                    break;
                }
            } else if (var12 - (var3 - 1) < 0) {
                break;
            }

            if (var10 - var18[var12] <= 0) {
                if (var10 - var18[var12] != 0) {
                    var19 = var1[var12];
                } else {
                    var19 = Math.min(var19, var1[var12]);
                }

                var10 = var18[var12];
            }

            if (0 - (var3 - 1) < 0) {
                ++var12;
            } else {
                --var12;
            }
        }

        return var19;
    }
}
