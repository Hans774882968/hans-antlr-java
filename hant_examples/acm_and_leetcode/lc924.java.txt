// decompile from lc924.hant, AC
class Solution {
    public int find(int[] var0, int var1) {
        return var1 - var0[var1] != 0 ? (var0[var1] = find(var0, var0[var1])) : var1;
    }

    public int min(int[] var0) {
        int var1 = Integer.MAX_VALUE;
        int var2 = 0;

        while (true) {
            if (0 - (var0.length - 1) < 0) {
                if (var2 - (var0.length - 1) > 0) {
                    break;
                }
            } else if (var2 - (var0.length - 1) < 0) {
                break;
            }

            var1 = Math.min(var1, var0[var2]);
            if (0 - (var0.length - 1) < 0) {
                ++var2;
            } else {
                --var2;
            }
        }

        return var1;
    }

    public int minMalwareSpread(int[][] var0, int[] var1) {
        int var2 = var0.length;
        int[] var3 = new int[var2];
        int var4 = 0;

        while (true) {
            if (0 - (var2 - 1) < 0) {
                if (var4 - (var2 - 1) > 0) {
                    break;
                }
            } else if (var4 - (var2 - 1) < 0) {
                break;
            }

            var3[var4] = var4;
            if (0 - (var2 - 1) < 0) {
                ++var4;
            } else {
                --var4;
            }
        }

        var4 = 0;

        int var5;
        while (true) {
            if (0 - (var2 - 1) < 0) {
                if (var4 - (var2 - 1) > 0) {
                    break;
                }
            } else if (var4 - (var2 - 1) < 0) {
                break;
            }

            for (var5 = 0; var5 - var4 < 0; ++var5) {
                if (var0[var4][var5] != 0) {
                    var3[find(var3, var4)] = find(var3, var5);
                }
            }

            if (0 - (var2 - 1) < 0) {
                ++var4;
            } else {
                --var4;
            }
        }

        int[] var10 = new int[var2];
        var5 = 0;

        while (true) {
            if (0 - (var2 - 1) < 0) {
                if (var5 - (var2 - 1) > 0) {
                    break;
                }
            } else if (var5 - (var2 - 1) < 0) {
                break;
            }

            ++var10[find(var3, var5)];
            if (0 - (var2 - 1) < 0) {
                ++var5;
            } else {
                --var5;
            }
        }

        int[] var11 = new int[var2];
        int var6 = 0;

        while (true) {
            if (0 - (var1.length - 1) < 0) {
                if (var6 - (var1.length - 1) > 0) {
                    break;
                }
            } else if (var6 - (var1.length - 1) < 0) {
                break;
            }

            ++var11[find(var3, var1[var6])];
            if (0 - (var1.length - 1) < 0) {
                ++var6;
            } else {
                --var6;
            }
        }

        var6 = var2;
        int var7 = -1;
        int var8 = 0;

        while (true) {
            if (0 - (var1.length - 1) < 0) {
                if (var8 - (var1.length - 1) > 0) {
                    break;
                }
            } else if (var8 - (var1.length - 1) < 0) {
                break;
            }

            int var9 = find(var3, var1[var8]);
            if (var11[var9] - 1 <= 0 && var7 - var10[var9] <= 0) {
                if (var7 - var10[var9] != 0) {
                    var6 = var1[var8];
                } else {
                    var6 = Math.min(var6, var1[var8]);
                }

                var7 = var10[var9];
            }

            if (0 - (var1.length - 1) < 0) {
                ++var8;
            } else {
                --var8;
            }
        }

        return var7 - -1 != 0 ? var6 : min(var1);
    }
}
